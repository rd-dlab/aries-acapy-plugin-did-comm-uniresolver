"""
    Aries Cloud Agent + didcomm_resolver Plugin

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0.6.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from acapy_client.api_client import ApiClient, Endpoint as _Endpoint
from acapy_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from acapy_client.model.admin_api_message_tracing import AdminAPIMessageTracing
from acapy_client.model.indy_cred_precis import IndyCredPrecis
from acapy_client.model.v20_pres_create_request_request import V20PresCreateRequestRequest
from acapy_client.model.v20_pres_ex_record import V20PresExRecord
from acapy_client.model.v20_pres_ex_record_list import V20PresExRecordList
from acapy_client.model.v20_pres_problem_report_request import V20PresProblemReportRequest
from acapy_client.model.v20_pres_proposal_request import V20PresProposalRequest
from acapy_client.model.v20_pres_send_request_request import V20PresSendRequestRequest
from acapy_client.model.v20_pres_spec_by_format_request import V20PresSpecByFormatRequest


class PresentProofV20Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __present_proof20_create_request_post(
            self,
            **kwargs
        ):
            """Creates a presentation request not bound to any proposal or connection  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.present_proof20_create_request_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (V20PresCreateRequestRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                V20PresExRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.present_proof20_create_request_post = _Endpoint(
            settings={
                'response_type': (V20PresExRecord,),
                'auth': [],
                'endpoint_path': '/present-proof-2.0/create-request',
                'operation_id': 'present_proof20_create_request_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (V20PresCreateRequestRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__present_proof20_create_request_post
        )

        def __present_proof20_records_get(
            self,
            **kwargs
        ):
            """Fetch all present-proof exchange records  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.present_proof20_records_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                connection_id (str): Connection identifier. [optional]
                role (str): Role assigned in presentation exchange. [optional]
                state (str): Presentation exchange state. [optional]
                thread_id (str): Thread identifier. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                V20PresExRecordList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.present_proof20_records_get = _Endpoint(
            settings={
                'response_type': (V20PresExRecordList,),
                'auth': [],
                'endpoint_path': '/present-proof-2.0/records',
                'operation_id': 'present_proof20_records_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'connection_id',
                    'role',
                    'state',
                    'thread_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'role',
                    'state',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('role',): {

                        "PROVER": "prover",
                        "VERIFIER": "verifier"
                    },
                    ('state',): {

                        "PROPOSAL-SENT": "proposal-sent",
                        "PROPOSAL-RECEIVED": "proposal-received",
                        "REQUEST-SENT": "request-sent",
                        "REQUEST-RECEIVED": "request-received",
                        "PRESENTATION-SENT": "presentation-sent",
                        "PRESENTATION-RECEIVED": "presentation-received",
                        "DONE": "done",
                        "ABANDONED": "abandoned"
                    },
                },
                'openapi_types': {
                    'connection_id':
                        (str,),
                    'role':
                        (str,),
                    'state':
                        (str,),
                    'thread_id':
                        (str,),
                },
                'attribute_map': {
                    'connection_id': 'connection_id',
                    'role': 'role',
                    'state': 'state',
                    'thread_id': 'thread_id',
                },
                'location_map': {
                    'connection_id': 'query',
                    'role': 'query',
                    'state': 'query',
                    'thread_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__present_proof20_records_get
        )

        def __present_proof20_records_pres_ex_id_credentials_get(
            self,
            pres_ex_id,
            **kwargs
        ):
            """Fetch credentials from wallet for presentation request  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.present_proof20_records_pres_ex_id_credentials_get(pres_ex_id, async_req=True)
            >>> result = thread.get()

            Args:
                pres_ex_id (str): Presentation exchange identifier

            Keyword Args:
                count (str): Maximum number to retrieve. [optional]
                extra_query (str): (JSON) object mapping referents to extra WQL queries. [optional]
                referent (str): Proof request referents of interest, comma-separated. [optional]
                start (str): Start index. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [IndyCredPrecis]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['pres_ex_id'] = \
                pres_ex_id
            return self.call_with_http_info(**kwargs)

        self.present_proof20_records_pres_ex_id_credentials_get = _Endpoint(
            settings={
                'response_type': ([IndyCredPrecis],),
                'auth': [],
                'endpoint_path': '/present-proof-2.0/records/{pres_ex_id}/credentials',
                'operation_id': 'present_proof20_records_pres_ex_id_credentials_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'pres_ex_id',
                    'count',
                    'extra_query',
                    'referent',
                    'start',
                ],
                'required': [
                    'pres_ex_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pres_ex_id':
                        (str,),
                    'count':
                        (str,),
                    'extra_query':
                        (str,),
                    'referent':
                        (str,),
                    'start':
                        (str,),
                },
                'attribute_map': {
                    'pres_ex_id': 'pres_ex_id',
                    'count': 'count',
                    'extra_query': 'extra_query',
                    'referent': 'referent',
                    'start': 'start',
                },
                'location_map': {
                    'pres_ex_id': 'path',
                    'count': 'query',
                    'extra_query': 'query',
                    'referent': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__present_proof20_records_pres_ex_id_credentials_get
        )

        def __present_proof20_records_pres_ex_id_delete(
            self,
            pres_ex_id,
            **kwargs
        ):
            """Remove an existing presentation exchange record  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.present_proof20_records_pres_ex_id_delete(pres_ex_id, async_req=True)
            >>> result = thread.get()

            Args:
                pres_ex_id (str): Presentation exchange identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['pres_ex_id'] = \
                pres_ex_id
            return self.call_with_http_info(**kwargs)

        self.present_proof20_records_pres_ex_id_delete = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/present-proof-2.0/records/{pres_ex_id}',
                'operation_id': 'present_proof20_records_pres_ex_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'pres_ex_id',
                ],
                'required': [
                    'pres_ex_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pres_ex_id':
                        (str,),
                },
                'attribute_map': {
                    'pres_ex_id': 'pres_ex_id',
                },
                'location_map': {
                    'pres_ex_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__present_proof20_records_pres_ex_id_delete
        )

        def __present_proof20_records_pres_ex_id_get(
            self,
            pres_ex_id,
            **kwargs
        ):
            """Fetch a single presentation exchange record  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.present_proof20_records_pres_ex_id_get(pres_ex_id, async_req=True)
            >>> result = thread.get()

            Args:
                pres_ex_id (str): Presentation exchange identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                V20PresExRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['pres_ex_id'] = \
                pres_ex_id
            return self.call_with_http_info(**kwargs)

        self.present_proof20_records_pres_ex_id_get = _Endpoint(
            settings={
                'response_type': (V20PresExRecord,),
                'auth': [],
                'endpoint_path': '/present-proof-2.0/records/{pres_ex_id}',
                'operation_id': 'present_proof20_records_pres_ex_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'pres_ex_id',
                ],
                'required': [
                    'pres_ex_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pres_ex_id':
                        (str,),
                },
                'attribute_map': {
                    'pres_ex_id': 'pres_ex_id',
                },
                'location_map': {
                    'pres_ex_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__present_proof20_records_pres_ex_id_get
        )

        def __present_proof20_records_pres_ex_id_problem_report_post(
            self,
            pres_ex_id,
            **kwargs
        ):
            """Send a problem report for presentation exchange  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.present_proof20_records_pres_ex_id_problem_report_post(pres_ex_id, async_req=True)
            >>> result = thread.get()

            Args:
                pres_ex_id (str): Presentation exchange identifier

            Keyword Args:
                body (V20PresProblemReportRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['pres_ex_id'] = \
                pres_ex_id
            return self.call_with_http_info(**kwargs)

        self.present_proof20_records_pres_ex_id_problem_report_post = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/present-proof-2.0/records/{pres_ex_id}/problem-report',
                'operation_id': 'present_proof20_records_pres_ex_id_problem_report_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pres_ex_id',
                    'body',
                ],
                'required': [
                    'pres_ex_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pres_ex_id':
                        (str,),
                    'body':
                        (V20PresProblemReportRequest,),
                },
                'attribute_map': {
                    'pres_ex_id': 'pres_ex_id',
                },
                'location_map': {
                    'pres_ex_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__present_proof20_records_pres_ex_id_problem_report_post
        )

        def __present_proof20_records_pres_ex_id_send_presentation_post(
            self,
            pres_ex_id,
            **kwargs
        ):
            """Sends a proof presentation  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.present_proof20_records_pres_ex_id_send_presentation_post(pres_ex_id, async_req=True)
            >>> result = thread.get()

            Args:
                pres_ex_id (str): Presentation exchange identifier

            Keyword Args:
                body (V20PresSpecByFormatRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                V20PresExRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['pres_ex_id'] = \
                pres_ex_id
            return self.call_with_http_info(**kwargs)

        self.present_proof20_records_pres_ex_id_send_presentation_post = _Endpoint(
            settings={
                'response_type': (V20PresExRecord,),
                'auth': [],
                'endpoint_path': '/present-proof-2.0/records/{pres_ex_id}/send-presentation',
                'operation_id': 'present_proof20_records_pres_ex_id_send_presentation_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pres_ex_id',
                    'body',
                ],
                'required': [
                    'pres_ex_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pres_ex_id':
                        (str,),
                    'body':
                        (V20PresSpecByFormatRequest,),
                },
                'attribute_map': {
                    'pres_ex_id': 'pres_ex_id',
                },
                'location_map': {
                    'pres_ex_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__present_proof20_records_pres_ex_id_send_presentation_post
        )

        def __present_proof20_records_pres_ex_id_send_request_post(
            self,
            pres_ex_id,
            **kwargs
        ):
            """Sends a presentation request in reference to a proposal  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.present_proof20_records_pres_ex_id_send_request_post(pres_ex_id, async_req=True)
            >>> result = thread.get()

            Args:
                pres_ex_id (str): Presentation exchange identifier

            Keyword Args:
                body (AdminAPIMessageTracing): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                V20PresExRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['pres_ex_id'] = \
                pres_ex_id
            return self.call_with_http_info(**kwargs)

        self.present_proof20_records_pres_ex_id_send_request_post = _Endpoint(
            settings={
                'response_type': (V20PresExRecord,),
                'auth': [],
                'endpoint_path': '/present-proof-2.0/records/{pres_ex_id}/send-request',
                'operation_id': 'present_proof20_records_pres_ex_id_send_request_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pres_ex_id',
                    'body',
                ],
                'required': [
                    'pres_ex_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pres_ex_id':
                        (str,),
                    'body':
                        (AdminAPIMessageTracing,),
                },
                'attribute_map': {
                    'pres_ex_id': 'pres_ex_id',
                },
                'location_map': {
                    'pres_ex_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__present_proof20_records_pres_ex_id_send_request_post
        )

        def __present_proof20_records_pres_ex_id_verify_presentation_post(
            self,
            pres_ex_id,
            **kwargs
        ):
            """Verify a received presentation  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.present_proof20_records_pres_ex_id_verify_presentation_post(pres_ex_id, async_req=True)
            >>> result = thread.get()

            Args:
                pres_ex_id (str): Presentation exchange identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                V20PresExRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['pres_ex_id'] = \
                pres_ex_id
            return self.call_with_http_info(**kwargs)

        self.present_proof20_records_pres_ex_id_verify_presentation_post = _Endpoint(
            settings={
                'response_type': (V20PresExRecord,),
                'auth': [],
                'endpoint_path': '/present-proof-2.0/records/{pres_ex_id}/verify-presentation',
                'operation_id': 'present_proof20_records_pres_ex_id_verify_presentation_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pres_ex_id',
                ],
                'required': [
                    'pres_ex_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pres_ex_id':
                        (str,),
                },
                'attribute_map': {
                    'pres_ex_id': 'pres_ex_id',
                },
                'location_map': {
                    'pres_ex_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__present_proof20_records_pres_ex_id_verify_presentation_post
        )

        def __present_proof20_send_proposal_post(
            self,
            **kwargs
        ):
            """Sends a presentation proposal  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.present_proof20_send_proposal_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (V20PresProposalRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                V20PresExRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.present_proof20_send_proposal_post = _Endpoint(
            settings={
                'response_type': (V20PresExRecord,),
                'auth': [],
                'endpoint_path': '/present-proof-2.0/send-proposal',
                'operation_id': 'present_proof20_send_proposal_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (V20PresProposalRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__present_proof20_send_proposal_post
        )

        def __present_proof20_send_request_post(
            self,
            **kwargs
        ):
            """Sends a free presentation request not bound to any proposal  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.present_proof20_send_request_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (V20PresSendRequestRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                V20PresExRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.present_proof20_send_request_post = _Endpoint(
            settings={
                'response_type': (V20PresExRecord,),
                'auth': [],
                'endpoint_path': '/present-proof-2.0/send-request',
                'operation_id': 'present_proof20_send_request_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (V20PresSendRequestRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__present_proof20_send_request_post
        )
