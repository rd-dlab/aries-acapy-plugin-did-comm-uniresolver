"""
    Aries Cloud Agent + didcomm_resolver Plugin

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0.6.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from acapy_client.api_client import ApiClient, Endpoint as _Endpoint
from acapy_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from acapy_client.model.attribute_mime_types_result import AttributeMimeTypesResult
from acapy_client.model.cred_brief import CredBrief
from acapy_client.model.cred_brief_list import CredBriefList
from acapy_client.model.cred_revoked_result import CredRevokedResult
from acapy_client.model.vc_record import VCRecord
from acapy_client.model.vc_record_list import VCRecordList
from acapy_client.model.w3_c_credentials_list_request import W3CCredentialsListRequest


class CredentialsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __credential_credential_id_delete(
            self,
            credential_id,
            **kwargs
        ):
            """Remove credential from wallet by id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.credential_credential_id_delete(credential_id, async_req=True)
            >>> result = thread.get()

            Args:
                credential_id (str): Credential identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['credential_id'] = \
                credential_id
            return self.call_with_http_info(**kwargs)

        self.credential_credential_id_delete = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/credential/{credential_id}',
                'operation_id': 'credential_credential_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'credential_id',
                ],
                'required': [
                    'credential_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credential_id':
                        (str,),
                },
                'attribute_map': {
                    'credential_id': 'credential_id',
                },
                'location_map': {
                    'credential_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__credential_credential_id_delete
        )

        def __credential_credential_id_get(
            self,
            credential_id,
            **kwargs
        ):
            """Fetch credential from wallet by id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.credential_credential_id_get(credential_id, async_req=True)
            >>> result = thread.get()

            Args:
                credential_id (str): Credential identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CredBrief
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['credential_id'] = \
                credential_id
            return self.call_with_http_info(**kwargs)

        self.credential_credential_id_get = _Endpoint(
            settings={
                'response_type': (CredBrief,),
                'auth': [],
                'endpoint_path': '/credential/{credential_id}',
                'operation_id': 'credential_credential_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'credential_id',
                ],
                'required': [
                    'credential_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credential_id':
                        (str,),
                },
                'attribute_map': {
                    'credential_id': 'credential_id',
                },
                'location_map': {
                    'credential_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__credential_credential_id_get
        )

        def __credential_mime_types_credential_id_get(
            self,
            credential_id,
            **kwargs
        ):
            """Get attribute MIME types from wallet  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.credential_mime_types_credential_id_get(credential_id, async_req=True)
            >>> result = thread.get()

            Args:
                credential_id (str): Credential identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AttributeMimeTypesResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['credential_id'] = \
                credential_id
            return self.call_with_http_info(**kwargs)

        self.credential_mime_types_credential_id_get = _Endpoint(
            settings={
                'response_type': (AttributeMimeTypesResult,),
                'auth': [],
                'endpoint_path': '/credential/mime-types/{credential_id}',
                'operation_id': 'credential_mime_types_credential_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'credential_id',
                ],
                'required': [
                    'credential_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credential_id':
                        (str,),
                },
                'attribute_map': {
                    'credential_id': 'credential_id',
                },
                'location_map': {
                    'credential_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__credential_mime_types_credential_id_get
        )

        def __credential_revoked_credential_id_get(
            self,
            credential_id,
            **kwargs
        ):
            """Query credential revocation status by id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.credential_revoked_credential_id_get(credential_id, async_req=True)
            >>> result = thread.get()

            Args:
                credential_id (str): Credential identifier

            Keyword Args:
                _from (str): Earliest epoch of revocation status interval of interest. [optional]
                to (str): Latest epoch of revocation status interval of interest. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CredRevokedResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['credential_id'] = \
                credential_id
            return self.call_with_http_info(**kwargs)

        self.credential_revoked_credential_id_get = _Endpoint(
            settings={
                'response_type': (CredRevokedResult,),
                'auth': [],
                'endpoint_path': '/credential/revoked/{credential_id}',
                'operation_id': 'credential_revoked_credential_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'credential_id',
                    '_from',
                    'to',
                ],
                'required': [
                    'credential_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credential_id':
                        (str,),
                    '_from':
                        (str,),
                    'to':
                        (str,),
                },
                'attribute_map': {
                    'credential_id': 'credential_id',
                    '_from': 'from',
                    'to': 'to',
                },
                'location_map': {
                    'credential_id': 'path',
                    '_from': 'query',
                    'to': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__credential_revoked_credential_id_get
        )

        def __credential_w3c_credential_id_delete(
            self,
            credential_id,
            **kwargs
        ):
            """Remove W3C credential from wallet by id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.credential_w3c_credential_id_delete(credential_id, async_req=True)
            >>> result = thread.get()

            Args:
                credential_id (str): Credential identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['credential_id'] = \
                credential_id
            return self.call_with_http_info(**kwargs)

        self.credential_w3c_credential_id_delete = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/credential/w3c/{credential_id}',
                'operation_id': 'credential_w3c_credential_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'credential_id',
                ],
                'required': [
                    'credential_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credential_id':
                        (str,),
                },
                'attribute_map': {
                    'credential_id': 'credential_id',
                },
                'location_map': {
                    'credential_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__credential_w3c_credential_id_delete
        )

        def __credential_w3c_credential_id_get(
            self,
            credential_id,
            **kwargs
        ):
            """Fetch W3C credential from wallet by id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.credential_w3c_credential_id_get(credential_id, async_req=True)
            >>> result = thread.get()

            Args:
                credential_id (str): Credential identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VCRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['credential_id'] = \
                credential_id
            return self.call_with_http_info(**kwargs)

        self.credential_w3c_credential_id_get = _Endpoint(
            settings={
                'response_type': (VCRecord,),
                'auth': [],
                'endpoint_path': '/credential/w3c/{credential_id}',
                'operation_id': 'credential_w3c_credential_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'credential_id',
                ],
                'required': [
                    'credential_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credential_id':
                        (str,),
                },
                'attribute_map': {
                    'credential_id': 'credential_id',
                },
                'location_map': {
                    'credential_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__credential_w3c_credential_id_get
        )

        def __credentials_get(
            self,
            **kwargs
        ):
            """Fetch credentials from wallet  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.credentials_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                count (str): Maximum number to retrieve. [optional]
                start (str): Start index. [optional]
                wql (str): (JSON) WQL query. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CredBriefList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.credentials_get = _Endpoint(
            settings={
                'response_type': (CredBriefList,),
                'auth': [],
                'endpoint_path': '/credentials',
                'operation_id': 'credentials_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'count',
                    'start',
                    'wql',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'count':
                        (str,),
                    'start':
                        (str,),
                    'wql':
                        (str,),
                },
                'attribute_map': {
                    'count': 'count',
                    'start': 'start',
                    'wql': 'wql',
                },
                'location_map': {
                    'count': 'query',
                    'start': 'query',
                    'wql': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__credentials_get
        )

        def __credentials_w3c_post(
            self,
            **kwargs
        ):
            """Fetch W3C credentials from wallet  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.credentials_w3c_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                count (str): Maximum number to retrieve. [optional]
                start (str): Start index. [optional]
                wql (str): (JSON) WQL query. [optional]
                body (W3CCredentialsListRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VCRecordList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.credentials_w3c_post = _Endpoint(
            settings={
                'response_type': (VCRecordList,),
                'auth': [],
                'endpoint_path': '/credentials/w3c',
                'operation_id': 'credentials_w3c_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'count',
                    'start',
                    'wql',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'count':
                        (str,),
                    'start':
                        (str,),
                    'wql':
                        (str,),
                    'body':
                        (W3CCredentialsListRequest,),
                },
                'attribute_map': {
                    'count': 'count',
                    'start': 'start',
                    'wql': 'wql',
                },
                'location_map': {
                    'count': 'query',
                    'start': 'query',
                    'wql': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__credentials_w3c_post
        )
