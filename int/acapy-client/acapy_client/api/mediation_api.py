"""
    Aries Cloud Agent + didcomm_resolver Plugin

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0.6.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from acapy_client.api_client import ApiClient, Endpoint as _Endpoint
from acapy_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from acapy_client.model.admin_mediation_deny import AdminMediationDeny
from acapy_client.model.keylist import Keylist
from acapy_client.model.keylist_query import KeylistQuery
from acapy_client.model.keylist_query_filter_request import KeylistQueryFilterRequest
from acapy_client.model.keylist_update import KeylistUpdate
from acapy_client.model.keylist_update_request import KeylistUpdateRequest
from acapy_client.model.mediation_create_request import MediationCreateRequest
from acapy_client.model.mediation_deny import MediationDeny
from acapy_client.model.mediation_grant import MediationGrant
from acapy_client.model.mediation_list import MediationList
from acapy_client.model.mediation_record import MediationRecord


class MediationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __mediation_default_mediator_delete(
            self,
            **kwargs
        ):
            """Clear default mediator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mediation_default_mediator_delete(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MediationRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.mediation_default_mediator_delete = _Endpoint(
            settings={
                'response_type': (MediationRecord,),
                'auth': [],
                'endpoint_path': '/mediation/default-mediator',
                'operation_id': 'mediation_default_mediator_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mediation_default_mediator_delete
        )

        def __mediation_default_mediator_get(
            self,
            **kwargs
        ):
            """Get default mediator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mediation_default_mediator_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MediationRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.mediation_default_mediator_get = _Endpoint(
            settings={
                'response_type': (MediationRecord,),
                'auth': [],
                'endpoint_path': '/mediation/default-mediator',
                'operation_id': 'mediation_default_mediator_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mediation_default_mediator_get
        )

        def __mediation_keylists_get(
            self,
            **kwargs
        ):
            """Retrieve keylists by connection or role  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mediation_keylists_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                conn_id (str): Connection identifier (optional). [optional]
                role (str): Filer on role, 'client' for keys         mediated by other agents, 'server' for keys         mediated by this agent. [optional] if omitted the server will use the default value of "server"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Keylist
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.mediation_keylists_get = _Endpoint(
            settings={
                'response_type': (Keylist,),
                'auth': [],
                'endpoint_path': '/mediation/keylists',
                'operation_id': 'mediation_keylists_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'role',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'role',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('role',): {

                        "CLIENT": "client",
                        "SERVER": "server"
                    },
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'role':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                    'role': 'role',
                },
                'location_map': {
                    'conn_id': 'query',
                    'role': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mediation_keylists_get
        )

        def __mediation_keylists_mediation_id_send_keylist_query_post(
            self,
            mediation_id,
            **kwargs
        ):
            """Send keylist query to mediator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mediation_keylists_mediation_id_send_keylist_query_post(mediation_id, async_req=True)
            >>> result = thread.get()

            Args:
                mediation_id (str): Mediation record identifier

            Keyword Args:
                paginate_limit (int): limit number of results. [optional] if omitted the server will use the default value of -1
                paginate_offset (int): offset to use in pagination. [optional] if omitted the server will use the default value of 0
                body (KeylistQueryFilterRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                KeylistQuery
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mediation_id'] = \
                mediation_id
            return self.call_with_http_info(**kwargs)

        self.mediation_keylists_mediation_id_send_keylist_query_post = _Endpoint(
            settings={
                'response_type': (KeylistQuery,),
                'auth': [],
                'endpoint_path': '/mediation/keylists/{mediation_id}/send-keylist-query',
                'operation_id': 'mediation_keylists_mediation_id_send_keylist_query_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'mediation_id',
                    'paginate_limit',
                    'paginate_offset',
                    'body',
                ],
                'required': [
                    'mediation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mediation_id':
                        (str,),
                    'paginate_limit':
                        (int,),
                    'paginate_offset':
                        (int,),
                    'body':
                        (KeylistQueryFilterRequest,),
                },
                'attribute_map': {
                    'mediation_id': 'mediation_id',
                    'paginate_limit': 'paginate_limit',
                    'paginate_offset': 'paginate_offset',
                },
                'location_map': {
                    'mediation_id': 'path',
                    'paginate_limit': 'query',
                    'paginate_offset': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mediation_keylists_mediation_id_send_keylist_query_post
        )

        def __mediation_keylists_mediation_id_send_keylist_update_post(
            self,
            mediation_id,
            **kwargs
        ):
            """Send keylist update to mediator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mediation_keylists_mediation_id_send_keylist_update_post(mediation_id, async_req=True)
            >>> result = thread.get()

            Args:
                mediation_id (str): Mediation record identifier

            Keyword Args:
                body (KeylistUpdateRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                KeylistUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mediation_id'] = \
                mediation_id
            return self.call_with_http_info(**kwargs)

        self.mediation_keylists_mediation_id_send_keylist_update_post = _Endpoint(
            settings={
                'response_type': (KeylistUpdate,),
                'auth': [],
                'endpoint_path': '/mediation/keylists/{mediation_id}/send-keylist-update',
                'operation_id': 'mediation_keylists_mediation_id_send_keylist_update_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'mediation_id',
                    'body',
                ],
                'required': [
                    'mediation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mediation_id':
                        (str,),
                    'body':
                        (KeylistUpdateRequest,),
                },
                'attribute_map': {
                    'mediation_id': 'mediation_id',
                },
                'location_map': {
                    'mediation_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mediation_keylists_mediation_id_send_keylist_update_post
        )

        def __mediation_mediation_id_default_mediator_put(
            self,
            mediation_id,
            **kwargs
        ):
            """Set default mediator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mediation_mediation_id_default_mediator_put(mediation_id, async_req=True)
            >>> result = thread.get()

            Args:
                mediation_id (str): Mediation record identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MediationRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mediation_id'] = \
                mediation_id
            return self.call_with_http_info(**kwargs)

        self.mediation_mediation_id_default_mediator_put = _Endpoint(
            settings={
                'response_type': (MediationRecord,),
                'auth': [],
                'endpoint_path': '/mediation/{mediation_id}/default-mediator',
                'operation_id': 'mediation_mediation_id_default_mediator_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'mediation_id',
                ],
                'required': [
                    'mediation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mediation_id':
                        (str,),
                },
                'attribute_map': {
                    'mediation_id': 'mediation_id',
                },
                'location_map': {
                    'mediation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mediation_mediation_id_default_mediator_put
        )

        def __mediation_request_conn_id_post(
            self,
            conn_id,
            **kwargs
        ):
            """Request mediation from connection  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mediation_request_conn_id_post(conn_id, async_req=True)
            >>> result = thread.get()

            Args:
                conn_id (str): Connection identifier

            Keyword Args:
                body (MediationCreateRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MediationRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['conn_id'] = \
                conn_id
            return self.call_with_http_info(**kwargs)

        self.mediation_request_conn_id_post = _Endpoint(
            settings={
                'response_type': (MediationRecord,),
                'auth': [],
                'endpoint_path': '/mediation/request/{conn_id}',
                'operation_id': 'mediation_request_conn_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'body',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'body':
                        (MediationCreateRequest,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                },
                'location_map': {
                    'conn_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mediation_request_conn_id_post
        )

        def __mediation_requests_get(
            self,
            **kwargs
        ):
            """Query mediation requests, returns list of all mediation records  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mediation_requests_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                conn_id (str): Connection identifier (optional). [optional]
                mediator_terms ([str]): List of mediator rules for recipient. [optional]
                recipient_terms ([str]): List of recipient rules for mediation. [optional]
                state (str): Mediation state (optional). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MediationList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.mediation_requests_get = _Endpoint(
            settings={
                'response_type': (MediationList,),
                'auth': [],
                'endpoint_path': '/mediation/requests',
                'operation_id': 'mediation_requests_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'mediator_terms',
                    'recipient_terms',
                    'state',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'state',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('state',): {

                        "REQUEST": "request",
                        "GRANTED": "granted",
                        "DENIED": "denied"
                    },
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'mediator_terms':
                        ([str],),
                    'recipient_terms':
                        ([str],),
                    'state':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                    'mediator_terms': 'mediator_terms',
                    'recipient_terms': 'recipient_terms',
                    'state': 'state',
                },
                'location_map': {
                    'conn_id': 'query',
                    'mediator_terms': 'query',
                    'recipient_terms': 'query',
                    'state': 'query',
                },
                'collection_format_map': {
                    'mediator_terms': 'multi',
                    'recipient_terms': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mediation_requests_get
        )

        def __mediation_requests_mediation_id_delete(
            self,
            mediation_id,
            **kwargs
        ):
            """Delete mediation request by ID  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mediation_requests_mediation_id_delete(mediation_id, async_req=True)
            >>> result = thread.get()

            Args:
                mediation_id (str): Mediation record identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MediationRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mediation_id'] = \
                mediation_id
            return self.call_with_http_info(**kwargs)

        self.mediation_requests_mediation_id_delete = _Endpoint(
            settings={
                'response_type': (MediationRecord,),
                'auth': [],
                'endpoint_path': '/mediation/requests/{mediation_id}',
                'operation_id': 'mediation_requests_mediation_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'mediation_id',
                ],
                'required': [
                    'mediation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mediation_id':
                        (str,),
                },
                'attribute_map': {
                    'mediation_id': 'mediation_id',
                },
                'location_map': {
                    'mediation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mediation_requests_mediation_id_delete
        )

        def __mediation_requests_mediation_id_deny_post(
            self,
            mediation_id,
            **kwargs
        ):
            """Deny a stored mediation request  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mediation_requests_mediation_id_deny_post(mediation_id, async_req=True)
            >>> result = thread.get()

            Args:
                mediation_id (str): Mediation record identifier

            Keyword Args:
                body (AdminMediationDeny): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MediationDeny
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mediation_id'] = \
                mediation_id
            return self.call_with_http_info(**kwargs)

        self.mediation_requests_mediation_id_deny_post = _Endpoint(
            settings={
                'response_type': (MediationDeny,),
                'auth': [],
                'endpoint_path': '/mediation/requests/{mediation_id}/deny',
                'operation_id': 'mediation_requests_mediation_id_deny_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'mediation_id',
                    'body',
                ],
                'required': [
                    'mediation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mediation_id':
                        (str,),
                    'body':
                        (AdminMediationDeny,),
                },
                'attribute_map': {
                    'mediation_id': 'mediation_id',
                },
                'location_map': {
                    'mediation_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mediation_requests_mediation_id_deny_post
        )

        def __mediation_requests_mediation_id_get(
            self,
            mediation_id,
            **kwargs
        ):
            """Retrieve mediation request record  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mediation_requests_mediation_id_get(mediation_id, async_req=True)
            >>> result = thread.get()

            Args:
                mediation_id (str): Mediation record identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MediationRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mediation_id'] = \
                mediation_id
            return self.call_with_http_info(**kwargs)

        self.mediation_requests_mediation_id_get = _Endpoint(
            settings={
                'response_type': (MediationRecord,),
                'auth': [],
                'endpoint_path': '/mediation/requests/{mediation_id}',
                'operation_id': 'mediation_requests_mediation_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mediation_id',
                ],
                'required': [
                    'mediation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mediation_id':
                        (str,),
                },
                'attribute_map': {
                    'mediation_id': 'mediation_id',
                },
                'location_map': {
                    'mediation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mediation_requests_mediation_id_get
        )

        def __mediation_requests_mediation_id_grant_post(
            self,
            mediation_id,
            **kwargs
        ):
            """Grant received mediation  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mediation_requests_mediation_id_grant_post(mediation_id, async_req=True)
            >>> result = thread.get()

            Args:
                mediation_id (str): Mediation record identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MediationGrant
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mediation_id'] = \
                mediation_id
            return self.call_with_http_info(**kwargs)

        self.mediation_requests_mediation_id_grant_post = _Endpoint(
            settings={
                'response_type': (MediationGrant,),
                'auth': [],
                'endpoint_path': '/mediation/requests/{mediation_id}/grant',
                'operation_id': 'mediation_requests_mediation_id_grant_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'mediation_id',
                ],
                'required': [
                    'mediation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mediation_id':
                        (str,),
                },
                'attribute_map': {
                    'mediation_id': 'mediation_id',
                },
                'location_map': {
                    'mediation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mediation_requests_mediation_id_grant_post
        )
