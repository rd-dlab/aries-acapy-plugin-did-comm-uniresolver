"""
    Aries Cloud Agent + didcomm_resolver Plugin

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0.6.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from acapy_client.api_client import ApiClient, Endpoint as _Endpoint
from acapy_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from acapy_client.model.date import Date
from acapy_client.model.endorser_info import EndorserInfo
from acapy_client.model.transaction_jobs import TransactionJobs
from acapy_client.model.transaction_list import TransactionList
from acapy_client.model.transaction_record import TransactionRecord


class EndorseTransactionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __transaction_tran_id_resend_post(
            self,
            tran_id,
            **kwargs
        ):
            """For Author to resend a particular transaction request  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transaction_tran_id_resend_post(tran_id, async_req=True)
            >>> result = thread.get()

            Args:
                tran_id (str): Transaction identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['tran_id'] = \
                tran_id
            return self.call_with_http_info(**kwargs)

        self.transaction_tran_id_resend_post = _Endpoint(
            settings={
                'response_type': (TransactionRecord,),
                'auth': [],
                'endpoint_path': '/transaction/{tran_id}/resend',
                'operation_id': 'transaction_tran_id_resend_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tran_id',
                ],
                'required': [
                    'tran_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tran_id':
                        (str,),
                },
                'attribute_map': {
                    'tran_id': 'tran_id',
                },
                'location_map': {
                    'tran_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__transaction_tran_id_resend_post
        )

        def __transactions_conn_id_set_endorser_info_post(
            self,
            conn_id,
            endorser_did,
            **kwargs
        ):
            """Set Endorser Info  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transactions_conn_id_set_endorser_info_post(conn_id, endorser_did, async_req=True)
            >>> result = thread.get()

            Args:
                conn_id (str): Connection identifier
                endorser_did (str): Endorser DID

            Keyword Args:
                endorser_name (str): Endorser Name. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EndorserInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['conn_id'] = \
                conn_id
            kwargs['endorser_did'] = \
                endorser_did
            return self.call_with_http_info(**kwargs)

        self.transactions_conn_id_set_endorser_info_post = _Endpoint(
            settings={
                'response_type': (EndorserInfo,),
                'auth': [],
                'endpoint_path': '/transactions/{conn_id}/set-endorser-info',
                'operation_id': 'transactions_conn_id_set_endorser_info_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'endorser_did',
                    'endorser_name',
                ],
                'required': [
                    'conn_id',
                    'endorser_did',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'endorser_did':
                        (str,),
                    'endorser_name':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                    'endorser_did': 'endorser_did',
                    'endorser_name': 'endorser_name',
                },
                'location_map': {
                    'conn_id': 'path',
                    'endorser_did': 'query',
                    'endorser_name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__transactions_conn_id_set_endorser_info_post
        )

        def __transactions_conn_id_set_endorser_role_post(
            self,
            conn_id,
            **kwargs
        ):
            """Set transaction jobs  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transactions_conn_id_set_endorser_role_post(conn_id, async_req=True)
            >>> result = thread.get()

            Args:
                conn_id (str): Connection identifier

            Keyword Args:
                transaction_my_job (str): Transaction related jobs. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionJobs
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['conn_id'] = \
                conn_id
            return self.call_with_http_info(**kwargs)

        self.transactions_conn_id_set_endorser_role_post = _Endpoint(
            settings={
                'response_type': (TransactionJobs,),
                'auth': [],
                'endpoint_path': '/transactions/{conn_id}/set-endorser-role',
                'operation_id': 'transactions_conn_id_set_endorser_role_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'transaction_my_job',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'transaction_my_job',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('transaction_my_job',): {

                        "TRANSACTION_AUTHOR": "TRANSACTION_AUTHOR",
                        "TRANSACTION_ENDORSER": "TRANSACTION_ENDORSER",
                        "RESET": "reset"
                    },
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'transaction_my_job':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                    'transaction_my_job': 'transaction_my_job',
                },
                'location_map': {
                    'conn_id': 'path',
                    'transaction_my_job': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__transactions_conn_id_set_endorser_role_post
        )

        def __transactions_create_request_post(
            self,
            tran_id,
            **kwargs
        ):
            """For author to send a transaction request  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transactions_create_request_post(tran_id, async_req=True)
            >>> result = thread.get()

            Args:
                tran_id (str): Transaction identifier

            Keyword Args:
                body (Date): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['tran_id'] = \
                tran_id
            return self.call_with_http_info(**kwargs)

        self.transactions_create_request_post = _Endpoint(
            settings={
                'response_type': (TransactionRecord,),
                'auth': [],
                'endpoint_path': '/transactions/create-request',
                'operation_id': 'transactions_create_request_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tran_id',
                    'body',
                ],
                'required': [
                    'tran_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tran_id':
                        (str,),
                    'body':
                        (Date,),
                },
                'attribute_map': {
                    'tran_id': 'tran_id',
                },
                'location_map': {
                    'tran_id': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__transactions_create_request_post
        )

        def __transactions_get(
            self,
            **kwargs
        ):
            """Query transactions  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transactions_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.transactions_get = _Endpoint(
            settings={
                'response_type': (TransactionList,),
                'auth': [],
                'endpoint_path': '/transactions',
                'operation_id': 'transactions_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__transactions_get
        )

        def __transactions_tran_id_cancel_post(
            self,
            tran_id,
            **kwargs
        ):
            """For Author to cancel a particular transaction request  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transactions_tran_id_cancel_post(tran_id, async_req=True)
            >>> result = thread.get()

            Args:
                tran_id (str): Transaction identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['tran_id'] = \
                tran_id
            return self.call_with_http_info(**kwargs)

        self.transactions_tran_id_cancel_post = _Endpoint(
            settings={
                'response_type': (TransactionRecord,),
                'auth': [],
                'endpoint_path': '/transactions/{tran_id}/cancel',
                'operation_id': 'transactions_tran_id_cancel_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tran_id',
                ],
                'required': [
                    'tran_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tran_id':
                        (str,),
                },
                'attribute_map': {
                    'tran_id': 'tran_id',
                },
                'location_map': {
                    'tran_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__transactions_tran_id_cancel_post
        )

        def __transactions_tran_id_endorse_post(
            self,
            tran_id,
            **kwargs
        ):
            """For Endorser to endorse a particular transaction record  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transactions_tran_id_endorse_post(tran_id, async_req=True)
            >>> result = thread.get()

            Args:
                tran_id (str): Transaction identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['tran_id'] = \
                tran_id
            return self.call_with_http_info(**kwargs)

        self.transactions_tran_id_endorse_post = _Endpoint(
            settings={
                'response_type': (TransactionRecord,),
                'auth': [],
                'endpoint_path': '/transactions/{tran_id}/endorse',
                'operation_id': 'transactions_tran_id_endorse_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tran_id',
                ],
                'required': [
                    'tran_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tran_id':
                        (str,),
                },
                'attribute_map': {
                    'tran_id': 'tran_id',
                },
                'location_map': {
                    'tran_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__transactions_tran_id_endorse_post
        )

        def __transactions_tran_id_get(
            self,
            tran_id,
            **kwargs
        ):
            """Fetch a single transaction record  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transactions_tran_id_get(tran_id, async_req=True)
            >>> result = thread.get()

            Args:
                tran_id (str): Transaction identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['tran_id'] = \
                tran_id
            return self.call_with_http_info(**kwargs)

        self.transactions_tran_id_get = _Endpoint(
            settings={
                'response_type': (TransactionRecord,),
                'auth': [],
                'endpoint_path': '/transactions/{tran_id}',
                'operation_id': 'transactions_tran_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'tran_id',
                ],
                'required': [
                    'tran_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tran_id':
                        (str,),
                },
                'attribute_map': {
                    'tran_id': 'tran_id',
                },
                'location_map': {
                    'tran_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__transactions_tran_id_get
        )

        def __transactions_tran_id_refuse_post(
            self,
            tran_id,
            **kwargs
        ):
            """For Endorser to refuse a particular transaction record  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transactions_tran_id_refuse_post(tran_id, async_req=True)
            >>> result = thread.get()

            Args:
                tran_id (str): Transaction identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['tran_id'] = \
                tran_id
            return self.call_with_http_info(**kwargs)

        self.transactions_tran_id_refuse_post = _Endpoint(
            settings={
                'response_type': (TransactionRecord,),
                'auth': [],
                'endpoint_path': '/transactions/{tran_id}/refuse',
                'operation_id': 'transactions_tran_id_refuse_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tran_id',
                ],
                'required': [
                    'tran_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tran_id':
                        (str,),
                },
                'attribute_map': {
                    'tran_id': 'tran_id',
                },
                'location_map': {
                    'tran_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__transactions_tran_id_refuse_post
        )

        def __transactions_tran_id_write_post(
            self,
            tran_id,
            **kwargs
        ):
            """For Author to write an endorsed transaction to the ledger  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transactions_tran_id_write_post(tran_id, async_req=True)
            >>> result = thread.get()

            Args:
                tran_id (str): Transaction identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['tran_id'] = \
                tran_id
            return self.call_with_http_info(**kwargs)

        self.transactions_tran_id_write_post = _Endpoint(
            settings={
                'response_type': (TransactionRecord,),
                'auth': [],
                'endpoint_path': '/transactions/{tran_id}/write',
                'operation_id': 'transactions_tran_id_write_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tran_id',
                ],
                'required': [
                    'tran_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tran_id':
                        (str,),
                },
                'attribute_map': {
                    'tran_id': 'tran_id',
                },
                'location_map': {
                    'tran_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__transactions_tran_id_write_post
        )
