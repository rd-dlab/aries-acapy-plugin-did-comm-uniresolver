"""
    Aries Cloud Agent + didcomm_resolver Plugin

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0.6.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from acapy_client.api_client import ApiClient, Endpoint as _Endpoint
from acapy_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from acapy_client.model.conn_record import ConnRecord
from acapy_client.model.connection_list import ConnectionList
from acapy_client.model.connection_metadata import ConnectionMetadata
from acapy_client.model.connection_metadata_set_request import ConnectionMetadataSetRequest
from acapy_client.model.connection_static_request import ConnectionStaticRequest
from acapy_client.model.connection_static_result import ConnectionStaticResult
from acapy_client.model.create_invitation_request import CreateInvitationRequest
from acapy_client.model.invitation_result import InvitationResult
from acapy_client.model.receive_invitation_request import ReceiveInvitationRequest


class ConnectionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __accept_invitation(
            self,
            conn_id,
            **kwargs
        ):
            """Accept a stored connection invitation  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.accept_invitation(conn_id, async_req=True)
            >>> result = thread.get()

            Args:
                conn_id (str): Connection identifier

            Keyword Args:
                mediation_id (str): Identifier for active mediation record to be used. [optional]
                my_endpoint (str): My URL endpoint. [optional]
                my_label (str): Label for connection. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ConnRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['conn_id'] = \
                conn_id
            return self.call_with_http_info(**kwargs)

        self.accept_invitation = _Endpoint(
            settings={
                'response_type': (ConnRecord,),
                'auth': [],
                'endpoint_path': '/connections/{conn_id}/accept-invitation',
                'operation_id': 'accept_invitation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'mediation_id',
                    'my_endpoint',
                    'my_label',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'mediation_id':
                        (str,),
                    'my_endpoint':
                        (str,),
                    'my_label':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                    'mediation_id': 'mediation_id',
                    'my_endpoint': 'my_endpoint',
                    'my_label': 'my_label',
                },
                'location_map': {
                    'conn_id': 'path',
                    'mediation_id': 'query',
                    'my_endpoint': 'query',
                    'my_label': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__accept_invitation
        )

        def __accept_request(
            self,
            conn_id,
            **kwargs
        ):
            """Accept a stored connection request  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.accept_request(conn_id, async_req=True)
            >>> result = thread.get()

            Args:
                conn_id (str): Connection identifier

            Keyword Args:
                my_endpoint (str): My URL endpoint. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ConnRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['conn_id'] = \
                conn_id
            return self.call_with_http_info(**kwargs)

        self.accept_request = _Endpoint(
            settings={
                'response_type': (ConnRecord,),
                'auth': [],
                'endpoint_path': '/connections/{conn_id}/accept-request',
                'operation_id': 'accept_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'my_endpoint',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'my_endpoint':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                    'my_endpoint': 'my_endpoint',
                },
                'location_map': {
                    'conn_id': 'path',
                    'my_endpoint': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__accept_request
        )

        def __connections(
            self,
            **kwargs
        ):
            """Query agent-to-agent connections  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.connections(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                alias (str): Alias. [optional]
                invitation_key (str): invitation key. [optional]
                my_did (str): My DID. [optional]
                state (str): Connection state. [optional]
                their_did (str): Their DID. [optional]
                their_role (str): Their role in the connection protocol. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ConnectionList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.connections = _Endpoint(
            settings={
                'response_type': (ConnectionList,),
                'auth': [],
                'endpoint_path': '/connections',
                'operation_id': 'connections',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'alias',
                    'invitation_key',
                    'my_did',
                    'state',
                    'their_did',
                    'their_role',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'state',
                    'their_role',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('state',): {

                        "INIT": "init",
                        "START": "start",
                        "ERROR": "error",
                        "ACTIVE": "active",
                        "INVITATION": "invitation",
                        "REQUEST": "request",
                        "RESPONSE": "response",
                        "COMPLETED": "completed",
                        "ABANDONED": "abandoned"
                    },
                    ('their_role',): {

                        "INVITEE": "invitee",
                        "REQUESTER": "requester",
                        "INVITER": "inviter",
                        "RESPONDER": "responder"
                    },
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'invitation_key':
                        (str,),
                    'my_did':
                        (str,),
                    'state':
                        (str,),
                    'their_did':
                        (str,),
                    'their_role':
                        (str,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'invitation_key': 'invitation_key',
                    'my_did': 'my_did',
                    'state': 'state',
                    'their_did': 'their_did',
                    'their_role': 'their_role',
                },
                'location_map': {
                    'alias': 'query',
                    'invitation_key': 'query',
                    'my_did': 'query',
                    'state': 'query',
                    'their_did': 'query',
                    'their_role': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__connections
        )

        def __create_invitation(
            self,
            **kwargs
        ):
            """Create a new connection invitation  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_invitation(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                alias (str): Alias. [optional]
                auto_accept (str): Auto-accept connection (defaults to configuration). [optional]
                multi_use (bool): Create invitation for multiple use (default false). [optional]
                public (bool): Create invitation from public DID (default false). [optional]
                body (CreateInvitationRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InvitationResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.create_invitation = _Endpoint(
            settings={
                'response_type': (InvitationResult,),
                'auth': [],
                'endpoint_path': '/connections/create-invitation',
                'operation_id': 'create_invitation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'alias',
                    'auto_accept',
                    'multi_use',
                    'public',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'auto_accept':
                        (str,),
                    'multi_use':
                        (bool,),
                    'public':
                        (bool,),
                    'body':
                        (CreateInvitationRequest,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'auto_accept': 'auto_accept',
                    'multi_use': 'multi_use',
                    'public': 'public',
                },
                'location_map': {
                    'alias': 'query',
                    'auto_accept': 'query',
                    'multi_use': 'query',
                    'public': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__create_invitation
        )

        def __create_static(
            self,
            **kwargs
        ):
            """Create a new static connection  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_static(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (ConnectionStaticRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ConnectionStaticResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.create_static = _Endpoint(
            settings={
                'response_type': (ConnectionStaticResult,),
                'auth': [],
                'endpoint_path': '/connections/create-static',
                'operation_id': 'create_static',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (ConnectionStaticRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__create_static
        )

        def __delete_connection(
            self,
            conn_id,
            **kwargs
        ):
            """Remove an existing connection record  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_connection(conn_id, async_req=True)
            >>> result = thread.get()

            Args:
                conn_id (str): Connection identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['conn_id'] = \
                conn_id
            return self.call_with_http_info(**kwargs)

        self.delete_connection = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/connections/{conn_id}',
                'operation_id': 'delete_connection',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                },
                'location_map': {
                    'conn_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_connection
        )

        def __get_connection(
            self,
            conn_id,
            **kwargs
        ):
            """Fetch a single connection record  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_connection(conn_id, async_req=True)
            >>> result = thread.get()

            Args:
                conn_id (str): Connection identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ConnRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['conn_id'] = \
                conn_id
            return self.call_with_http_info(**kwargs)

        self.get_connection = _Endpoint(
            settings={
                'response_type': (ConnRecord,),
                'auth': [],
                'endpoint_path': '/connections/{conn_id}',
                'operation_id': 'get_connection',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                },
                'location_map': {
                    'conn_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_connection
        )

        def __get_metadata(
            self,
            conn_id,
            **kwargs
        ):
            """Fetch connection metadata  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_metadata(conn_id, async_req=True)
            >>> result = thread.get()

            Args:
                conn_id (str): Connection identifier

            Keyword Args:
                key (str): Key to retrieve.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ConnectionMetadata
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['conn_id'] = \
                conn_id
            return self.call_with_http_info(**kwargs)

        self.get_metadata = _Endpoint(
            settings={
                'response_type': (ConnectionMetadata,),
                'auth': [],
                'endpoint_path': '/connections/{conn_id}/metadata',
                'operation_id': 'get_metadata',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'key',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'key':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                    'key': 'key',
                },
                'location_map': {
                    'conn_id': 'path',
                    'key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_metadata
        )

        def __receive_invitation(
            self,
            **kwargs
        ):
            """Receive a new connection invitation  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.receive_invitation(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                alias (str): Alias. [optional]
                auto_accept (str): Auto-accept connection (defaults to configuration). [optional]
                mediation_id (str): Identifier for active mediation record to be used. [optional]
                body (ReceiveInvitationRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ConnRecord
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.receive_invitation = _Endpoint(
            settings={
                'response_type': (ConnRecord,),
                'auth': [],
                'endpoint_path': '/connections/receive-invitation',
                'operation_id': 'receive_invitation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'alias',
                    'auto_accept',
                    'mediation_id',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'auto_accept':
                        (str,),
                    'mediation_id':
                        (str,),
                    'body':
                        (ReceiveInvitationRequest,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'auto_accept': 'auto_accept',
                    'mediation_id': 'mediation_id',
                },
                'location_map': {
                    'alias': 'query',
                    'auto_accept': 'query',
                    'mediation_id': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__receive_invitation
        )

        def __set_metadata(
            self,
            conn_id,
            **kwargs
        ):
            """Set connection metadata  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_metadata(conn_id, async_req=True)
            >>> result = thread.get()

            Args:
                conn_id (str): Connection identifier

            Keyword Args:
                body (ConnectionMetadataSetRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ConnectionMetadata
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['conn_id'] = \
                conn_id
            return self.call_with_http_info(**kwargs)

        self.set_metadata = _Endpoint(
            settings={
                'response_type': (ConnectionMetadata,),
                'auth': [],
                'endpoint_path': '/connections/{conn_id}/metadata',
                'operation_id': 'set_metadata',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'body',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'body':
                        (ConnectionMetadataSetRequest,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                },
                'location_map': {
                    'conn_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__set_metadata
        )
