"""
    Aries Cloud Agent + didcomm_resolver Plugin

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0.6.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from acapy_client.api_client import ApiClient, Endpoint as _Endpoint
from acapy_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from acapy_client.model.schema_get_result import SchemaGetResult
from acapy_client.model.schema_send_request import SchemaSendRequest
from acapy_client.model.schemas_created_result import SchemasCreatedResult
from acapy_client.model.txn_or_schema_send_result import TxnOrSchemaSendResult


class SchemaApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __schemas_created_get(
            self,
            **kwargs
        ):
            """Search for matching schema that agent originated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.schemas_created_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                schema_id (str): Schema identifier. [optional]
                schema_issuer_did (str): Schema issuer DID. [optional]
                schema_name (str): Schema name. [optional]
                schema_version (str): Schema version. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SchemasCreatedResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.schemas_created_get = _Endpoint(
            settings={
                'response_type': (SchemasCreatedResult,),
                'auth': [],
                'endpoint_path': '/schemas/created',
                'operation_id': 'schemas_created_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'schema_id',
                    'schema_issuer_did',
                    'schema_name',
                    'schema_version',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'schema_id':
                        (str,),
                    'schema_issuer_did':
                        (str,),
                    'schema_name':
                        (str,),
                    'schema_version':
                        (str,),
                },
                'attribute_map': {
                    'schema_id': 'schema_id',
                    'schema_issuer_did': 'schema_issuer_did',
                    'schema_name': 'schema_name',
                    'schema_version': 'schema_version',
                },
                'location_map': {
                    'schema_id': 'query',
                    'schema_issuer_did': 'query',
                    'schema_name': 'query',
                    'schema_version': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__schemas_created_get
        )

        def __schemas_post(
            self,
            **kwargs
        ):
            """Sends a schema to the ledger  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.schemas_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                conn_id (str): Connection identifier. [optional]
                create_transaction_for_endorser (bool): Create Transaction For Endorser's  signature. [optional]
                body (SchemaSendRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TxnOrSchemaSendResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.schemas_post = _Endpoint(
            settings={
                'response_type': (TxnOrSchemaSendResult,),
                'auth': [],
                'endpoint_path': '/schemas',
                'operation_id': 'schemas_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'create_transaction_for_endorser',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'create_transaction_for_endorser':
                        (bool,),
                    'body':
                        (SchemaSendRequest,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                    'create_transaction_for_endorser': 'create_transaction_for_endorser',
                },
                'location_map': {
                    'conn_id': 'query',
                    'create_transaction_for_endorser': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__schemas_post
        )

        def __schemas_schema_id_get(
            self,
            schema_id,
            **kwargs
        ):
            """Gets a schema from the ledger  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.schemas_schema_id_get(schema_id, async_req=True)
            >>> result = thread.get()

            Args:
                schema_id (str): Schema identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SchemaGetResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['schema_id'] = \
                schema_id
            return self.call_with_http_info(**kwargs)

        self.schemas_schema_id_get = _Endpoint(
            settings={
                'response_type': (SchemaGetResult,),
                'auth': [],
                'endpoint_path': '/schemas/{schema_id}',
                'operation_id': 'schemas_schema_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'schema_id',
                ],
                'required': [
                    'schema_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'schema_id':
                        (str,),
                },
                'attribute_map': {
                    'schema_id': 'schema_id',
                },
                'location_map': {
                    'schema_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__schemas_schema_id_get
        )
